// Code generated by 'yaegi extract gitlab.com/rarimo/xo/templates/gotpl'. DO NOT EDIT.

package internal

import (
	"gitlab.com/rarimo/xo/templates/gotpl"
	"reflect"
)

func init() {
	Symbols["gitlab.com/rarimo/xo/templates/gotpl/gotpl"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Conflict":           reflect.ValueOf(gotpl.Conflict),
		"ConflictKey":        reflect.ValueOf(gotpl.ConflictKey),
		"Context":            reflect.ValueOf(gotpl.Context),
		"ContextKey":         reflect.ValueOf(gotpl.ContextKey),
		"Custom":             reflect.ValueOf(gotpl.Custom),
		"CustomKey":          reflect.ValueOf(gotpl.CustomKey),
		"EnumTablePrefix":    reflect.ValueOf(gotpl.EnumTablePrefix),
		"EnumTablePrefixKey": reflect.ValueOf(gotpl.EnumTablePrefixKey),
		"Esc":                reflect.ValueOf(gotpl.Esc),
		"EscKey":             reflect.ValueOf(gotpl.EscKey),
		"FieldTag":           reflect.ValueOf(gotpl.FieldTag),
		"FieldTagKey":        reflect.ValueOf(gotpl.FieldTagKey),
		"Files":              reflect.ValueOf(&gotpl.Files).Elem(),
		"First":              reflect.ValueOf(gotpl.First),
		"FirstKey":           reflect.ValueOf(gotpl.FirstKey),
		"ImportKey":          reflect.ValueOf(gotpl.ImportKey),
		"Imports":            reflect.ValueOf(gotpl.Imports),
		"InitialismKey":      reflect.ValueOf(gotpl.InitialismKey),
		"Inject":             reflect.ValueOf(gotpl.Inject),
		"InjectFile":         reflect.ValueOf(gotpl.InjectFile),
		"InjectFileKey":      reflect.ValueOf(gotpl.InjectFileKey),
		"InjectKey":          reflect.ValueOf(gotpl.InjectKey),
		"Int32":              reflect.ValueOf(gotpl.Int32),
		"Int32Key":           reflect.ValueOf(gotpl.Int32Key),
		"KnownTypes":         reflect.ValueOf(gotpl.KnownTypes),
		"KnownTypesKey":      reflect.ValueOf(gotpl.KnownTypesKey),
		"Legacy":             reflect.ValueOf(gotpl.Legacy),
		"LegacyKey":          reflect.ValueOf(gotpl.LegacyKey),
		"NotFirst":           reflect.ValueOf(gotpl.NotFirst),
		"NotFirstKey":        reflect.ValueOf(gotpl.NotFirstKey),
		"Pkg":                reflect.ValueOf(gotpl.Pkg),
		"PkgKey":             reflect.ValueOf(gotpl.PkgKey),
		"Shorts":             reflect.ValueOf(gotpl.Shorts),
		"ShortsKey":          reflect.ValueOf(gotpl.ShortsKey),
		"TagKey":             reflect.ValueOf(gotpl.TagKey),
		"Tags":               reflect.ValueOf(gotpl.Tags),
		"UUIDKey":            reflect.ValueOf(gotpl.UUIDKey),
		"Uint32":             reflect.ValueOf(gotpl.Uint32),
		"Uint32Key":          reflect.ValueOf(gotpl.Uint32Key),

		// type definitions
		"Enum":          reflect.ValueOf((*gotpl.Enum)(nil)),
		"EnumValue":     reflect.ValueOf((*gotpl.EnumValue)(nil)),
		"Field":         reflect.ValueOf((*gotpl.Field)(nil)),
		"ForeignKey":    reflect.ValueOf((*gotpl.ForeignKey)(nil)),
		"Index":         reflect.ValueOf((*gotpl.Index)(nil)),
		"PackageImport": reflect.ValueOf((*gotpl.PackageImport)(nil)),
		"Proc":          reflect.ValueOf((*gotpl.Proc)(nil)),
		"Query":         reflect.ValueOf((*gotpl.Query)(nil)),
		"QueryParam":    reflect.ValueOf((*gotpl.QueryParam)(nil)),
		"Table":         reflect.ValueOf((*gotpl.Table)(nil)),
	}
}
